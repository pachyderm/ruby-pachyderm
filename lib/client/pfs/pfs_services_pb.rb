# Generated by the protocol buffer compiler.  DO NOT EDIT!
# Source: client/pfs/pfs.proto for package 'pfs'

require 'grpc'
require 'client/pfs/pfs_pb'

module Pfs
  module API
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'pfs.API'

      # Repo rpcs
      # CreateRepo creates a new repo.
      # An error is returned if the repo already exists.
      rpc :CreateRepo, CreateRepoRequest, Google::Protobuf::Empty
      # InspectRepo returns info about a repo.
      rpc :InspectRepo, InspectRepoRequest, RepoInfo
      # ListRepo returns info about all repos.
      rpc :ListRepo, ListRepoRequest, ListRepoResponse
      # DeleteRepo deletes a repo.
      rpc :DeleteRepo, DeleteRepoRequest, Google::Protobuf::Empty
      # Commit rpcs
      # StartCommit creates a new write commit from a parent commit.
      rpc :StartCommit, StartCommitRequest, Commit
      # FinishCommit turns a write commit into a read commit.
      rpc :FinishCommit, FinishCommitRequest, Google::Protobuf::Empty
      # InspectCommit returns the info about a commit.
      rpc :InspectCommit, InspectCommitRequest, CommitInfo
      # ListCommit returns info about all commits. This is deprecated in favor of
      # ListCommitStream.
      rpc :ListCommit, ListCommitRequest, CommitInfos
      # ListCommitStream is like ListCommit, but returns its results in a GRPC stream
      rpc :ListCommitStream, ListCommitRequest, stream(CommitInfo)
      # DeleteCommit deletes a commit.
      rpc :DeleteCommit, DeleteCommitRequest, Google::Protobuf::Empty
      # FlushCommit waits for downstream commits to finish
      rpc :FlushCommit, FlushCommitRequest, stream(CommitInfo)
      # SubscribeCommit subscribes for new commits on a given branch
      rpc :SubscribeCommit, SubscribeCommitRequest, stream(CommitInfo)
      # BuildCommit builds a commit that's backed by the given tree
      rpc :BuildCommit, BuildCommitRequest, Commit
      # CreateBranch creates a new branch
      rpc :CreateBranch, CreateBranchRequest, Google::Protobuf::Empty
      # InspectBranch returns info about a branch.
      rpc :InspectBranch, InspectBranchRequest, BranchInfo
      # ListBranch returns info about the heads of branches.
      rpc :ListBranch, ListBranchRequest, BranchInfos
      # DeleteBranch deletes a branch; note that the commits still exist.
      rpc :DeleteBranch, DeleteBranchRequest, Google::Protobuf::Empty
      # File rpcs
      # PutFile writes the specified file to pfs.
      rpc :PutFile, stream(PutFileRequest), Google::Protobuf::Empty
      # CopyFile copies the contents of one file to another.
      rpc :CopyFile, CopyFileRequest, Google::Protobuf::Empty
      # GetFile returns a byte stream of the contents of the file.
      rpc :GetFile, GetFileRequest, stream(Google::Protobuf::BytesValue)
      # InspectFile returns info about a file.
      rpc :InspectFile, InspectFileRequest, FileInfo
      # ListFile returns info about all files. This is deprecated in favor of
      # ListFileStream
      rpc :ListFile, ListFileRequest, FileInfos
      # ListFileStream is a streaming version of ListFile
      # TODO(msteffen): When the dash has been updated to use ListFileStream,
      # replace ListFile with this RPC (https://github.com/pachyderm/dash/issues/201)
      rpc :ListFileStream, ListFileRequest, stream(FileInfo)
      # GlobFile returns info about all files. This is deprecated in favor of
      # GlobFileStream
      rpc :GlobFile, GlobFileRequest, FileInfos
      # GlobFileStream is a streaming version of GlobFile
      # TODO(msteffen): When the dash has been updated to use GlobFileStream,
      # replace GlobFile with this RPC (https://github.com/pachyderm/dash/issues/201)
      rpc :GlobFileStream, GlobFileRequest, stream(FileInfo)
      # DiffFile returns the differences between 2 paths at 2 commits.
      rpc :DiffFile, DiffFileRequest, DiffFileResponse
      # DeleteFile deletes a file.
      rpc :DeleteFile, DeleteFileRequest, Google::Protobuf::Empty
      # DeleteAll deletes everything
      rpc :DeleteAll, Google::Protobuf::Empty, Google::Protobuf::Empty
    end

    Stub = Service.rpc_stub_class
  end
  module ObjectAPI
    class Service

      include GRPC::GenericService

      self.marshal_class_method = :encode
      self.unmarshal_class_method = :decode
      self.service_name = 'pfs.ObjectAPI'

      rpc :PutObject, stream(PutObjectRequest), Object
      rpc :PutObjectSplit, stream(PutObjectRequest), Objects
      rpc :GetObject, Object, stream(Google::Protobuf::BytesValue)
      rpc :GetObjects, GetObjectsRequest, stream(Google::Protobuf::BytesValue)
      rpc :TagObject, TagObjectRequest, Google::Protobuf::Empty
      rpc :InspectObject, Object, ObjectInfo
      # CheckObject checks if an object exists in the blob store without
      # actually reading the object.
      rpc :CheckObject, CheckObjectRequest, CheckObjectResponse
      rpc :ListObjects, ListObjectsRequest, stream(Object)
      rpc :DeleteObjects, DeleteObjectsRequest, DeleteObjectsResponse
      rpc :GetTag, Tag, stream(Google::Protobuf::BytesValue)
      rpc :InspectTag, Tag, ObjectInfo
      rpc :ListTags, ListTagsRequest, stream(ListTagsResponse)
      rpc :DeleteTags, DeleteTagsRequest, DeleteTagsResponse
      rpc :Compact, Google::Protobuf::Empty, Google::Protobuf::Empty
    end

    Stub = Service.rpc_stub_class
  end
end
